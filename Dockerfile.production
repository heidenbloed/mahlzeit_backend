###########
# BUILDER #
###########

# pull official base image
FROM python:3.9-alpine3.19 as builder

# set work directory
WORKDIR /code

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 and pillow dependencies
RUN apk update && apk add postgresql-libs postgresql-dev libffi-dev openldap-dev unixodbc-dev gcc musl-dev python3-dev jpeg-dev zlib-dev libjpeg libwebp libwebp-dev

# install knox dependencies
RUN apk add build-base libffi-dev

# install dependencies
RUN pip install --upgrade pip
COPY ./requirements.txt /code/
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /code/wheels -r requirements.txt


#########
# FINAL #
#########

FROM python:3.9-alpine3.19

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
ARG UID=1000
RUN addgroup -S app && adduser -S app -G app -u $UID

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/static
RUN mkdir $APP_HOME/media
RUN mkdir $APP_HOME/backup_data
WORKDIR $APP_HOME

# install dependencies
RUN apk update && apk add libpq jpeg-dev zlib-dev libjpeg libwebp libwebp-dev libffi-dev postgresql14-client
COPY --from=builder /code/wheels /wheels
COPY --from=builder /code/requirements.txt .
RUN pip install --no-cache /wheels/*

# copy entrypoint.sh
COPY ./docker-entrypoint.production.sh .
RUN sed -i 's/\r$//g' $APP_HOME/docker-entrypoint.production.sh
RUN chmod +x $APP_HOME/docker-entrypoint.production.sh

# copy project
COPY ./backend/ $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.sh
ENTRYPOINT ["/home/app/web/docker-entrypoint.production.sh"]